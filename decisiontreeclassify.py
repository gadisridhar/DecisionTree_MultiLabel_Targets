# -*- coding: utf-8 -*-
"""DecisionTreeClassify.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DMoS_wyH_oVlX7FvTv4lflo6Jb8LOdUV
"""

#pip install mlxtend==0.20.0

#pip install category_encoders

# Commented out IPython magic to ensure Python compatibility.
############################ For regression: f_regression, mutual_info_regression
############################ For classification: chi2, f_classif, mutual_info_classif

from sklearn.metrics import r2_score, confusion_matrix, mean_absolute_error, mean_squared_error, classification_report, accuracy_score
from sklearn.preprocessing import OneHotEncoder, LabelEncoder
from sklearn.preprocessing import StandardScaler
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
# %matplotlib inline
from sklearn.tree import DecisionTreeClassifier, DecisionTreeRegressor
import category_encoders as ce
from sklearn import tree
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import chi2, SelectKBest, f_classif
from sklearn.feature_extraction import DictVectorizer, FeatureHasher
from sklearn import tree
from mlxtend.evaluate import bias_variance_decomp

df = pd.read_csv('/content/sample_data/cpmp.csv')
df.head(5)

df = df.drop(['instance_id','runtime','runstatus','group.same.min','group.same.max'], axis=1)

df.head(5)

df.dtypes

df['bflb'] = np.log(df['bflb'])
df['stacks'] = np.log(df['stacks'])
df['tiers'] = np.log(df['tiers'])
df['repetition'] = np.log(df['repetition'])
df['top.good.min'] = np.log(df['top.good.min'])
df['top.good.max'] = np.log(df['top.good.max'])

df.dtypes

df.head(5)

ohe = ce.OneHotEncoder(use_cat_names=True)
df_algo = ohe.fit_transform((df['algorithm'])) 
df_algo

df = df.join(df_algo)
df = df.drop(['algorithm'], axis='columns')
df.head(5)

X = df.iloc[:, :23].values

pd.DataFrame(X)

YData = df[['algorithm_idastar.symmulgt.transmul','algorithm_astar.symmullt.transmul','algorithm_astar.symmulgt.transmul','algorithm_idastar.symmullt.transmul']]

YData = YData.values
(YData)

X_train,X_test, Y_train, Y_test = train_test_split(X,YData, test_size=0.3, random_state=42)

print(X_train.shape)
print(X_test.shape)
print(Y_train.shape)
print(Y_test.shape)
print(type(X_train))
print(type(Y_train))

scaler = StandardScaler()
scaler.fit_transform(X_train)
scaler.transform(X_test)

dtC = DecisionTreeClassifier(criterion='entropy', random_state=42, 
                             max_depth=2)
#, min_samples_leaf=6, max_features=2, splitter='best', min_samples_split=4
#dtC = DecisionTreeClassifier(criterion='gini', random_state=100, max_depth=3, min_samples_leaf=5)
#when leaf nde = 5  accuracy = 68%
dtC.fit(X_train, Y_train)

Y_pred_test = dtC.predict(X_test)

score = dtC.score(X_test, Y_test)
score

acc =  accuracy_score(Y_test, Y_pred_test)*100
acc

score = dtC.score(X_train, Y_train)
score

Y_pred_train = dtC.predict(X_train)

acc =  accuracy_score(Y_train, Y_pred_train)*100
acc

#CLASSIFAICTION REPORT FOR Y TRAIN
classreport=  classification_report(Y_train, Y_pred_train)
print(classreport)

Y_pred_test[0:5]

Y_test[0:5]

# CONFUSION MATRIX FOR TEST DATA
y_test_data = [ np.argmax(t) for t in Y_test ]
y_predict_data = [ np.argmax(t) for t in Y_pred_test ]

cm =  confusion_matrix(y_test_data, y_predict_data)
cm

cm_df = pd.DataFrame(cm,index = ['algorithm_idastar.symmulgt.transmul','algorithm_astar.symmullt.transmul','algorithm_astar.symmulgt.transmul','algorithm_idastar.symmullt.transmul'], 
                     columns = ['algorithm_idastar.symmulgt.transmul','algorithm_astar.symmullt.transmul','algorithm_astar.symmulgt.transmul','algorithm_idastar.symmullt.transmul'])

#Plotting the confusion matrix
plt.figure(figsize=(5,4))
sns.heatmap(cm_df, annot=True)
plt.title('Confusion Matrix')
plt.ylabel('Predicted Values')
plt.xlabel('Actual Values')
plt.show()

# CONFUSION MATRIX FOR TRAIN DATA
y_train_data = [ np.argmax(t) for t in Y_train ]
y_trainpredict_data = [ np.argmax(t) for t in Y_pred_train ]

cm2 =  confusion_matrix(y_train_data, y_trainpredict_data)
cm2

cm_df2 = pd.DataFrame(cm2,index = ['algorithm_idastar.symmulgt.transmul','algorithm_astar.symmullt.transmul','algorithm_astar.symmulgt.transmul','algorithm_idastar.symmullt.transmul'], 
                     columns = ['algorithm_idastar.symmulgt.transmul','algorithm_astar.symmullt.transmul','algorithm_astar.symmulgt.transmul','algorithm_idastar.symmullt.transmul'])

#Plotting the confusion matrix
plt.figure(figsize=(5,4))
sns.heatmap(cm_df2, annot=True)
plt.title('Confusion Matrix')
plt.ylabel('Predicted Values')
plt.xlabel('Actual Values')
plt.show()